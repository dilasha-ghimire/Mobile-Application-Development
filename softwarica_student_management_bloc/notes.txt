# HIVE DATABASE

step 1: /lib/app/constants/hive_table_constant.dart
step 2: /lib/features/../domain/entity/entity.dart
step 3: /lib/features/../data/model/hive_model.dart
step 4: terminal 'dart run build_runner build -d'
        any model created run this file to create adapter class
        '-d' regenerates adapter file


/lib/core/error/failure.dart - to handle failure
/lib/features/../domain/repository/repository.dart
/lib/core/network/hive_service.dart 
- to interact with hive database and write queries

/lib/features/../data/data_source/
/lib/features/../data/repository/
/lib/features/../domain/usecase/


# PRESENTATION LAYER

di.dart
presentation/ 
             view/view.dart
             view_model/bloc/
                             bloc.dart
                             event.dart
                             state.dart


# API 

/lib/app/constants/api_endpoints.dart
/lib/core/network/dio_error_interceptor.dart 
- check for every status code
/lib/features/../data/model/api_model.dart
/lib/features/../data/data_source/remote_datasource.dart
/lib/features/../data/repository/remote_repository.dart
/lib/app/di/di.dart
- api service

# FETCHING DATA 

/lib/features/../data/dto/get_all_dto.dart
        - terminal 'dart run build_runner build -d'
        - any model created run this file to create adapter class
        - '-d' regenerates adapter file
/lib/features/../data/data_source/remote_datasource.dart
/lib/features/../data/repository/remote_repository.dart
di.dart - usecases to remote_repository

auth: wrote to json and from json code in model and 
        created g.dart file for model instead of dto
